https://doc.rust-lang.org/nomicon/references.html

string -> stored in stack
String -> stored in heap

scope:
in the paranthesis it was declared
and
till it is last used




┌─────────┐
│OWNERSHIP|
└─────────┘
Each value in Rust has an owner.
There can only be one owner of a value at a time.
Only when the owner goes out of scope, the value will be dropped, preventing multiple deallocation of the same memory.

When a reference type variable is assigned to another one or passed to a function, it gives the ownership of the memory it holds.
The new scope is now that of the assignee.

If a variable does not own a value, it is not allowed to be read but can be assigned.
    let s1 = String::from("hello");
    let s2 = s1; // gives the ownership of "hello" to s2

    println!("{}, world!", s1); // error: s1 does not own a value
    ---    
    let mut s1 = String::from("hello");
    let s2 = s1; // gives the ownership of "hello" to s2
    s1 = String::from("world"); // takes ownership

    println!("{}, world!", s1); // no error


    let s3 = String::from("world");
    foo(s3);
    println!("hello, {}!", s3); // error: s3 does not own a value





┌─────────┐
│BORROWING|
└─────────┘
When reference variables are passed or assigned to by reference(&), they are borrowed,
meaning that the owner did not change.
Therefore, borrowed value is not cleaned but only the original one is.
fn main() {
    let mut s = String::from("hello");

    change(&mut s); // s still owns "hello"
} // s is freed
fn change(some_string: &mut String) {
    some_string.push_str(", world");
} // some_string is not freed


In one scope
At any given time, you can have either one mutable reference or any number of immutable references.
1 - The reason why having a mutable reference restricts having more mutable references is,
to prevent race condition.
    let mut s = String::from("hello");

    let r1 = &mut s;
    let r2 = &mut s; // error: multiple mutable reference

    println!("{}, {}", r1, r2);

2 - The reason why having a mutable reference restricts having any immutable reference is,
in order for immutable references not to get unexpected change in data. (like a promise)
    let mut s = String::from("hello");
    let r1 = &s; // no problem
    let r2 = &mut s; // BIG PROBLEM
    println!("{}", r1);

To get around this constraint, simply change scope
1 - Nest a paranthesis and do the operation there.
    let mut s = String::from("hello");

    {
        let r1 = &mut s;
    } // r1 goes out of scope here, so we can make a new reference with no problems.

    let r2 = &mut s;

2 - Where a variable is last used is the end of its scope, allowing for multiple mutable references
    let mut s = String::from("hello");
    let r1 = &s; // no problem
    println!("{}", r1); // r1 is last used here, the end of its scope
    let r2 = &mut s;





┌─────────┐
│LIFETIMES|
└─────────┘
Preventing Dangling References with Lifetimes
fn main() {
    let r;                // ---------+-- 'a
                          //          |
    {                     //          |
        let x = 5;        // -+-- 'b  |
        r = &x;           //  |       |
    }                     // -+       |
                          //          |
    println!("r: {}", r); //          |
}                         // ---------+
// error: borrowed value does not live long enough

fn longest(x: &str, y: &str) -> &str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
} // error: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`

&i32        // a reference
&'a i32     // a reference with an explicit lifetime
&'a mut i32 // a mutable reference with an explicit lifetime

fn main() {
    let string1 = String::from("abcd");
    let string2 = "xyz";

    let result = longest(string1.as_str(), string2);
    println!("The longest string is {}", result);
}
fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

fn main() {
    let string1 = String::from("long string is long");
    let result;
    {
        let string2 = String::from("xyz");
        result = longest(string1.as_str(), string2.as_str());
    } // error: borrowed value does not live long enough
    println!("The longest string is {}", result);
}
fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

fn main() {
    let string1 = String::from("abcd");
    let string2 = "efghijklmnopqrstuvwxyz";

    let result = longest(string1.as_str(), string2);
    println!("The longest string is {}", result);
}
fn longest<'a>(x: &'a str, y: &str) -> &'a str {
    x
} // no error

fn longest<'a>(x: &str, y: &str) -> &'a str {
    let result = String::from("really long string");
    result.as_str()
} // error: returns a reference to data owned by the current function

each variable declaration nests a new scope

let x = 0;
let y = &x;
let z = &y;
// NOTE: `'a: {` and `&'b x` is not valid syntax!
'a: {
    let x: i32 = 0;
    'b: {
        // lifetime used is 'b because that's good enough.
        let y: &'b i32 = &'b x;
        'c: {
            // ditto on 'c
            let z: &'c &'b i32 = &'c y; // "a reference to a reference to an i32" (with lifetimes annotated)
        }
    }
}

let x = 0;
let z;
let y = &x;
z = y;
'a: {
    let x: i32 = 0;
    'b: {
        let z: &'b i32;
        'c: {
            // Must use 'b here because the reference to x is
            // being passed to the scope 'b.
            let y: &'b i32 = &'b x;
            z = y;
        }
    }
}

fn as_str(data: &u32) -> &str {
    let s = format!("{}", data);
    &s
}
fn as_str<'a>(data: &'a u32) -> &'a str {
    'b: {
        let s = format!("{}", data);
        return &'a s;
    }
}

fn as_str<'a>(data: &'a u32) -> &'a str {
    'b: {
        let s = format!("{}", data);
        return &'a s
    }
}
fn main() {
    'c: {
        let x: u32 = 0;
        'd: {
            // An anonymous scope is introduced because the borrow does not
            // need to last for the whole scope x is valid for. The return
            // of as_str must find a str somewhere before this function
            // call. Obviously not happening.
            println!("{}", as_str::<'d>(&'d x));
        }
    }
}
